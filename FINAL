

# IMPORTS
from tkinter import *
from tkinter import ttk, simpledialog
import random
from tkinter.messagebox import showinfo


# CLASS CODE
class Account:
def __init__(self, name, balance):
  self.name = name
  self.balance = balance
  account_list.append(self)

# Deposit method
def deposit(self, amount):
  if amount > 0:
    self.balance += amount
    return True
  else:
    return False

# Withdrawal method
def withdraw(self, amount):
  if amount > 0 and amount <= self.balance:
    self.balance -= amount
    return True
  else:
    return False



# FUNCTIONS AND SETUP
# Create a function to get account names list
def create_name_list():
name_list = []
for account in account_list:
  name_list.append(account.name)
return name_list

# a function that will update the balance
def update_balance():
total_balance = 0
balance_string = ""

# Append each accounts balance, progress and goal to the label
for account in account_list:
  balance_string += "{}: ${:.2f} \n".format(account.name, account.balance)
  total_balance += account.balance

balance_string += "\nTotal balance: ${:.2f}".format(total_balance)
account_details.set(balance_string)

# Create the deposit function
def deposit_money(account):
if account.deposit(amount.get()):
  action_feedback.set("Success! Total of ${:.2f} deposited into {}".format(amount.get(), account.name))
else:
  action_feedback.set("Please enter a positive number")

# Create the withdraw function
def withdraw_money(account):
if account.withdraw(amount.get()):
  action_feedback.set("Success! Total of ${:.2f} withdrawn from {}".format(amount.get(), account.name))
else:
  action_feedback.set("Not enough money in {} or not a valid amount".format(account.name))

# Create the manage action function
def manage_action():
try:
  for account in account_list:
    if chosen_account.get() == account.name:
      if chosen_action.get() == "Deposit":
        deposit_money(account)
      else:
        withdraw_money(account)

  # Update the GUI
  update_balance()
  amount.set("")

# exception for text input
except ValueError:
  action_feedback.set("Please enter a valid number")


# Lists
account_list = []

# instances of the class
savings = Account("Savings", 0,)
phone = Account("Spending", 0, )
holiday = Account("Holiday", 0,)
account_names = create_name_list()
# GUI CODE
root = Tk()
root.title("Finance Manager")

# top frame
top_frame = ttk.LabelFrame(root, text="Account Details")
top_frame.grid(row=0, column=0, padx=10, pady=10, sticky="NSEW")
# set the message text variable
message_text = StringVar()
message_text.set("Welcome to your finance manager! use the below boxes to organise your money")

# pack the message label
message_label = ttk.Label(top_frame, textvariable=message_text, wraplength=250)
message_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

# set the account details variable
account_details = StringVar()

# Created the details label and packed it into the GUI
details_label = ttk.Label(top_frame, textvariable=account_details)
details_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# bottom frame
bottom_frame = ttk.LabelFrame(root)
bottom_frame.grid(row=1, column=0, padx=10, pady=10, sticky="NSEW")

#  account combobox label
account_label = ttk.Label(bottom_frame, text="Account: ")
account_label.grid(row=3, column=0, padx=10, pady=3)

# variable and option list for the account Combobox
account_names = ["Savings", "Spending", "Holiday"]
chosen_account = StringVar()
chosen_account.set(account_names[0])

# ACCOUNT CREATION

# Creating a function to create the account
class account_creation:
title: object

def __init__(self):
 self.title = simpledialog.askstring("account title", "Enter a title for the account, and a starting value, then press submit")

def __call__(self):
  account_names.append(self.title)

# Create a Combobox to select the account
account_box = ttk.Combobox(bottom_frame, textvariable=chosen_account, state="readonly")
account_box['values'] = account_names
account_box.grid(row=3, column=1, padx=10, pady=3, sticky="WE")

# Create a label for the action Combobox
action_label = ttk.Label(bottom_frame, text="Action:")
action_label.grid(row=4, column=0)

# Set up a variable and option list for the action Combobox
action_list = ["Deposit", "Withdraw"]
chosen_action = StringVar()
chosen_action.set(action_list[0])

# Create the Combobox to select the action
action_box = ttk.Combobox(bottom_frame, textvariable=chosen_action, state="readonly")
action_box['values'] = action_list
action_box.grid(row=4, column=1, padx=10, pady=3, sticky="WE")

# Create a label for the amount field and pack it into the GUI
amount_label = ttk.Label(bottom_frame, text="Amount:")
amount_label.grid(row=5, column=0, padx=10, pady=3)

# Create a variable to store the amount
amount = DoubleVar()
amount.set("")

# Create an entry to type in amount
amount_entry = ttk.Entry(bottom_frame, textvariable=amount)
amount_entry.grid(row=5, column=1, padx=10, pady=3, sticky="WE")

# Create a submit button
submit_button = ttk.Button(bottom_frame, text="Submit", command=manage_action)
submit_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

# Create an action feedback label
action_feedback = StringVar()
action_feedback_label = ttk.Label(bottom_frame, textvariable=action_feedback)
action_feedback_label.grid(row=7, column=0, columnspan=2)

# Run the mainloop
update_balance()
root.mainloop()
